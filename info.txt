Setup a node project:
Create project directory 
Create server directory and initialise it (npm init)
Install the dependencies (npm --save // npm --save-dev)

Configuring eslint:
1. Install
$ npm install eslint --save-dev
2. Init eslint (creates .eslint.json file)
$ ./node_modules/.bin/eslint --init
3. Configure rules for eslint
4. install the eslint extension

Using Babel
1. Install babel as a devDependency (for this project I am going to use babel-cli)
2. Can use babel require hooks (### should not be used in production ###)
see index.js
2 a. Use pre-compiled scripts, see package.json(### should be used in production ##) babel-cli

Testing
Supertest is a wrapper for the request library and then you can use a suite on top of this like mocha or jasmine.

Express
Development and production middleware come built in.

Calling next() simply just sends the request down the middleware pipeline via callback
The callback is simply put on the callback queue and the current function continues to execute
Use a 'return' statement to halt the flow of execution to prevent errors such as 
'Error: Can't set headers after they are sent.'

Calling next(new Error()) sends the request to the next 'error handling' middleware
Error handling middleware has 'error' or 'err' as the first argument.
If there is no next in the pipeline the execution is finished.

ES6 / ES2015
Scoping:
'var' uses variable hoisting 
'let' does not, provides block Scoping
'const' does not and can only be assigned once, it will raise an error otherwise.

Argument spreading:
function example(...args) {
  // args is an array of the input
  args.foreach( data, // do something useful)
}

function numbersExample(x, y, z) {
  // do something here
}
var numbers = [1, 2, 3];
numbersExample(...numbers);

Classes: 
Class App {
  constructor() { ... };
  method() { ... };
}

Modules:

import something from 'something';
export something;
or
export default something;
